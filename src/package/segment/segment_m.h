//
// Generated file, do not edit! Created by nedtool 4.6 from package/segment/segment.msg.
//

#ifndef _WSN_ENERGY_SEGMENT_M_H_
#define _WSN_ENERGY_SEGMENT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include <ipAddress.h>
// }}


namespace wsn_energy {

/**
 * Class generated from <tt>package/segment/segment.msg:18</tt> by nedtool.
 * <pre>
 * // Segment
 * packet UdpPacketInterface
 * {
 *     int headerLength; // meta-data: header length, depends on specific format
 * }
 * </pre>
 */
class UdpPacketInterface : public ::cPacket
{
  protected:
    int headerLength_var;

  private:
    void copy(const UdpPacketInterface& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UdpPacketInterface&);

  public:
    UdpPacketInterface(const char *name=NULL, int kind=0);
    UdpPacketInterface(const UdpPacketInterface& other);
    virtual ~UdpPacketInterface();
    UdpPacketInterface& operator=(const UdpPacketInterface& other);
    virtual UdpPacketInterface *dup() const {return new UdpPacketInterface(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getHeaderLength() const;
    virtual void setHeaderLength(int headerLength);
};

inline void doPacking(cCommBuffer *b, UdpPacketInterface& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UdpPacketInterface& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>package/segment/segment.msg:22</tt> by nedtool.
 * <pre>
 * packet UdpPacketStandard extends UdpPacketInterface
 * {
 *     headerLength = 8;  // meta-data: header length, carried in-line
 * 
 *     short sourcePort;      // 2 octets of source port
 *     IpAddress destinationPortV6; // 	2 octets of destination port
 *     short length;          // 	2 octets of packet length
 *     short checksum;        // 	2 octets of check sum of pseudo-header (IP header) 
 * 
 *     int destinationPort; // meta
 * }
 * </pre>
 */
class UdpPacketStandard : public ::wsn_energy::UdpPacketInterface
{
  protected:
    short sourcePort_var;
    IpAddress destinationPortV6_var;
    short length_var;
    short checksum_var;
    int destinationPort_var;

  private:
    void copy(const UdpPacketStandard& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UdpPacketStandard&);

  public:
    UdpPacketStandard(const char *name=NULL, int kind=0);
    UdpPacketStandard(const UdpPacketStandard& other);
    virtual ~UdpPacketStandard();
    UdpPacketStandard& operator=(const UdpPacketStandard& other);
    virtual UdpPacketStandard *dup() const {return new UdpPacketStandard(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual short getSourcePort() const;
    virtual void setSourcePort(short sourcePort);
    virtual IpAddress& getDestinationPortV6();
    virtual const IpAddress& getDestinationPortV6() const {return const_cast<UdpPacketStandard*>(this)->getDestinationPortV6();}
    virtual void setDestinationPortV6(const IpAddress& destinationPortV6);
    virtual short getLength() const;
    virtual void setLength(short length);
    virtual short getChecksum() const;
    virtual void setChecksum(short checksum);
    virtual int getDestinationPort() const;
    virtual void setDestinationPort(int destinationPort);
};

inline void doPacking(cCommBuffer *b, UdpPacketStandard& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UdpPacketStandard& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>package/segment/segment.msg:35</tt> by nedtool.
 * <pre>
 * packet UdpPacketCompressed extends UdpPacketInterface
 * {
 *     // 	compressed HC1 = 3 octets RFC 4944
 *     headerLength = 4; // meta-data: header length (3) + data in-line (1)
 * 
 * //	The UDP header's checksum field is not compressed and is therefore carried in full.
 * //
 * //                      1                   2                   3
 * //      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * //      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * //      |HC_UDP encoding|     Fields carried in-line follow...
 * //      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * //
 * //         Figure 16: HC_UDP (UDP common compressed header encoding)
 * //
 * //	UDP source port (bit 0):
 * //        0: Not compressed, carried "in-line" (Section 10.3.2)
 * //        1: Compressed to 4 bits.  The actual 16-bit source port is
 * //           obtained by calculating: P + short_port value.  The value of
 * //           P is the number 61616 (0xF0B0).  The short_port is expressed
 * //           as a 4-bit value which is carried "in-line" (Section 10.3.2)
 * //
 * //  UDP destination port (bit 1):
 * //        0: Not compressed, carried "in-line" (Section 10.3.2)
 * //        1: Compressed to 4 bits.  The actual 16-bit destination port is
 * //           obtained by calculating: P + short_port value.  The value of
 * //           P is the number 61616 (0xF0B0).  The short_port is expressed
 * //           as a 4-bit value which is carried "in-line" (Section 10.3.2)
 * //
 * //  Length (bit 2):
 * //        0: not compressed, carried "in-line" (Section 10.3.2)
 * //        1: compressed, length computed from IPv6 header length
 * //           information.  The value of the UDP length field is equal to
 * //           the Payload Length from the IPv6 header, minus the length of
 * //           any extension headers present between the IPv6 header and
 * //           the UDP header.
 * //
 * //  Reserved (bit 3 through 7)
 * 
 *     bool udpSourcePortCompressed;			// 1 bit 
 *     bool udpDestinationPortCompressed;		// 1 bit
 *     bool lengthCompressed;				    // 1 bit
 * 	// 5 bit reserved
 * 
 *     // in-line fields
 *     short checksum; 			// 2 octets ALWAYS NON-COMPRESSED
 * 
 *     int inlineLength;				 // 0 bit compressed/ 16 bits non-compressed
 *     int inlineUdpSourcePort;      // 4 bit compressed/ 16 bits non-compressed 
 *     IpAddress inlineUdpDestinationPortV6; // 4 bit compressed/ 16 bits non-compressed
 * 
 *     int inlineUdpDestinationPort; // meta
 * }
 * </pre>
 */
class UdpPacketCompressed : public ::wsn_energy::UdpPacketInterface
{
  protected:
    bool udpSourcePortCompressed_var;
    bool udpDestinationPortCompressed_var;
    bool lengthCompressed_var;
    short checksum_var;
    int inlineLength_var;
    int inlineUdpSourcePort_var;
    IpAddress inlineUdpDestinationPortV6_var;
    int inlineUdpDestinationPort_var;

  private:
    void copy(const UdpPacketCompressed& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UdpPacketCompressed&);

  public:
    UdpPacketCompressed(const char *name=NULL, int kind=0);
    UdpPacketCompressed(const UdpPacketCompressed& other);
    virtual ~UdpPacketCompressed();
    UdpPacketCompressed& operator=(const UdpPacketCompressed& other);
    virtual UdpPacketCompressed *dup() const {return new UdpPacketCompressed(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getUdpSourcePortCompressed() const;
    virtual void setUdpSourcePortCompressed(bool udpSourcePortCompressed);
    virtual bool getUdpDestinationPortCompressed() const;
    virtual void setUdpDestinationPortCompressed(bool udpDestinationPortCompressed);
    virtual bool getLengthCompressed() const;
    virtual void setLengthCompressed(bool lengthCompressed);
    virtual short getChecksum() const;
    virtual void setChecksum(short checksum);
    virtual int getInlineLength() const;
    virtual void setInlineLength(int inlineLength);
    virtual int getInlineUdpSourcePort() const;
    virtual void setInlineUdpSourcePort(int inlineUdpSourcePort);
    virtual IpAddress& getInlineUdpDestinationPortV6();
    virtual const IpAddress& getInlineUdpDestinationPortV6() const {return const_cast<UdpPacketCompressed*>(this)->getInlineUdpDestinationPortV6();}
    virtual void setInlineUdpDestinationPortV6(const IpAddress& inlineUdpDestinationPortV6);
    virtual int getInlineUdpDestinationPort() const;
    virtual void setInlineUdpDestinationPort(int inlineUdpDestinationPort);
};

inline void doPacking(cCommBuffer *b, UdpPacketCompressed& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UdpPacketCompressed& obj) {obj.parsimUnpack(b);}

} // namespace wsn_energy

#endif // ifndef _WSN_ENERGY_SEGMENT_M_H_

