//
// Generated file, do not edit! Created by nedtool 4.6 from package/data/data.msg.
//

#ifndef _WSN_ENERGY_DATA_M_H_
#define _WSN_ENERGY_DATA_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include <ipAddress.h>
// }}


namespace wsn_energy {

/**
 * Class generated from <tt>package/data/data.msg:18</tt> by nedtool.
 * <pre>
 * // Data
 * packet Data
 * {
 *     double time;  		// meta-data: timestamp upon sending
 * 
 *     int destinationPort; 	  // meta-data: destination port
 *     int destinationIPAddress; // meta-data: destination IP Address
 * 
 *     IpAddress destinationIPAddressV6;
 * 
 *     string value; 		// undefined length, data to be sent to server
 * }
 * </pre>
 */
class Data : public ::cPacket
{
  protected:
    double time_var;
    int destinationPort_var;
    int destinationIPAddress_var;
    IpAddress destinationIPAddressV6_var;
    opp_string value_var;

  private:
    void copy(const Data& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Data&);

  public:
    Data(const char *name=NULL, int kind=0);
    Data(const Data& other);
    virtual ~Data();
    Data& operator=(const Data& other);
    virtual Data *dup() const {return new Data(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getTime() const;
    virtual void setTime(double time);
    virtual int getDestinationPort() const;
    virtual void setDestinationPort(int destinationPort);
    virtual int getDestinationIPAddress() const;
    virtual void setDestinationIPAddress(int destinationIPAddress);
    virtual IpAddress& getDestinationIPAddressV6();
    virtual const IpAddress& getDestinationIPAddressV6() const {return const_cast<Data*>(this)->getDestinationIPAddressV6();}
    virtual void setDestinationIPAddressV6(const IpAddress& destinationIPAddressV6);
    virtual const char * getValue() const;
    virtual void setValue(const char * value);
};

inline void doPacking(cCommBuffer *b, Data& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Data& obj) {obj.parsimUnpack(b);}

} // namespace wsn_energy

#endif // ifndef _WSN_ENERGY_DATA_M_H_

